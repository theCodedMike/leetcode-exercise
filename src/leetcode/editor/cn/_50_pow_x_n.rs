//Implement pow(x, n), which calculates x raised to the power n (i.e., x‚Åø).
//
//
// Example 1:
//
//
//Input: x = 2.00000, n = 10
//Output: 1024.00000
//
//
// Example 2:
//
//
//Input: x = 2.10000, n = 3
//Output: 9.26100
//
//
// Example 3:
//
//
//Input: x = 2.00000, n = -2
//Output: 0.25000
//Explanation: 2‚Åª¬≤ = 1/2¬≤ = 1/4 = 0.25
//
//
//
// Constraints:
//
//
// -100.0 < x < 100.0
// -2¬≥¬π <= n <= 2¬≥¬π-1
// n is an integer.
// Either x is not zero or n > 0.
// -10‚Å¥ <= x‚Åø <= 10‚Å¥
//
//
// Related Topics Math Recursion üëç 7693 üëé 7825

#![allow(dead_code)]

pub struct Solution;
// ÊµãËØïÁî®‰æã: x=0.00001         n= 2147483647        ÊúüÊúõÁªìÊûú:0
// ÊµãËØïÁî®‰æã: x=1.00000         n= 2147483647        ÊúüÊúõÁªìÊûú:1
// ÊµãËØïÁî®‰æã: x=2.00000         n=-2147483647        ÊúüÊúõÁªìÊûú:0
// ÊµãËØïÁî®‰æã: x=2.00000         n=-2147483648        ÊúüÊúõÁªìÊûú:0
// ÊµãËØïÁî®‰æã: x=1.0000000000001 n=-2147483648        ÊúüÊúõÁªìÊûú:0.99979

//leetcode submit region begin(Prohibit modification and deletion)

impl Solution {
    pub fn my_pow(x: f64, n: i32) -> f64 {
        if n == 0 {
            return 1.0;
        } else if n & 1 == 0 {
            // n‰∏∫ÂÅ∂Êï∞
            return Solution::my_pow(x * x, n / 2);
        } else {
            // n‰∏∫Â•áÊï∞
            return if n > 0 { x } else { 1.0 / x } * Solution::my_pow(x * x, n / 2);
        }
    }
}
//leetcode submit region end(Prohibit modification and deletion)
